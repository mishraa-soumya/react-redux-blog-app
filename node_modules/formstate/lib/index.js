"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var mobx_1 = require("mobx");
var utils = require("./internal/utils");
/**
 * Runs the value through a list of validators. As soon as a validation error is detected, the error is returned
 */
function applyValidators(value, validators) {
    return new Promise(function (resolve) {
        var currentIndex = 0;
        var gotoNextValidator = function () {
            currentIndex++;
            runCurrentValidator();
        };
        var runCurrentValidator = function () {
            if (currentIndex == validators.length) {
                resolve(null);
                return;
            }
            var validator = validators[currentIndex];
            var res = validator(value);
            // no error
            if (!res) {
                gotoNextValidator();
                return;
            }
            // some error
            if (!res.then) {
                resolve(res);
                return;
            }
            // wait for error response
            res.then(function (msg) {
                if (!msg)
                    gotoNextValidator();
                else
                    resolve(msg);
            });
        };
        // kickoff
        runCurrentValidator();
    });
}
exports.applyValidators = applyValidators;
/**
 * Helps maintain the value + error information about a field
 *
 * This is the glue between the *page* and *field* in the presence of invalid states.
 */
var FieldState = (function () {
    function FieldState(config) {
        var _this = this;
        this.config = config;
        this.autoValidationEnabled = true;
        this.enableAutoValidationAndValidate = function () {
            _this.autoValidationEnabled = true;
            _this.validate();
        };
        this.disableAutoValidation = function () {
            _this.autoValidationEnabled = false;
        };
        /** On change on the component side */
        this.onChange = function (value) {
            // Immediately set for local ui binding
            _this.value = value;
            _this.onUpdate();
            if (_this.autoValidationEnabled) {
                _this.queueValidation();
            }
        };
        /**
         * If the page wants to reinitialize the field with a new value,
         * it should call this function
         */
        this.reinitValue = function (value) {
            // This value vetos all previous values
            _this.value = value;
            _this.error = undefined;
            _this.$ = value;
            _this.onUpdate();
        };
        this.validating = false;
        /**
         * Runs validation on the current value immediately
         */
        this.lastValidationRequest = 0;
        this.validate = function () {
            _this.lastValidationRequest++;
            var lastValidationRequest = _this.lastValidationRequest;
            _this.validating = true;
            var value = _this.value;
            return applyValidators(_this.value, _this.config.validators || [])
                .then(function (fieldError) {
                if (_this.lastValidationRequest !== lastValidationRequest)
                    return;
                _this.validating = false;
                /** For any change in field error, update our error */
                if (fieldError != _this.error) {
                    _this.error = fieldError;
                }
                _this.onUpdate();
                var hasError = _this.hasError;
                if (hasError) {
                    return { hasError: hasError };
                }
                else {
                    _this.$ = value;
                    return {
                        hasError: hasError,
                        value: value
                    };
                }
            });
        };
        /**
         * Runs validation with debouncing to keep the UI super smoothly responsive
         */
        this.queueValidation = utils.debounce(this.validate, 200);
        this.onUpdate = function () {
            _this.config.onUpdate && _this.config.onUpdate(_this);
        };
        this.value = config.value;
        this.$ = config.value;
        /**
         * Automatic validation configuration
         */
        this.queueValidation = utils.debounce(this.validate, config.autoValidationDebounceMs || 200);
        this.autoValidationEnabled = config.autoValidationEnabled == undefined ? true : config.autoValidationEnabled;
    }
    Object.defineProperty(FieldState.prototype, "hasError", {
        get: function () {
            return !!this.error;
        },
        enumerable: true,
        configurable: true
    });
    return FieldState;
}());
__decorate([
    mobx_1.observable
], FieldState.prototype, "value", void 0);
__decorate([
    mobx_1.observable
], FieldState.prototype, "error", void 0);
__decorate([
    mobx_1.observable
], FieldState.prototype, "$", void 0);
__decorate([
    mobx_1.observable
], FieldState.prototype, "autoValidationEnabled", void 0);
__decorate([
    mobx_1.action
], FieldState.prototype, "enableAutoValidationAndValidate", void 0);
__decorate([
    mobx_1.action
], FieldState.prototype, "disableAutoValidation", void 0);
__decorate([
    mobx_1.action
], FieldState.prototype, "onChange", void 0);
__decorate([
    mobx_1.action
], FieldState.prototype, "reinitValue", void 0);
__decorate([
    mobx_1.observable
], FieldState.prototype, "validating", void 0);
__decorate([
    mobx_1.observable
], FieldState.prototype, "lastValidationRequest", void 0);
__decorate([
    mobx_1.action
], FieldState.prototype, "validate", void 0);
__decorate([
    mobx_1.action
], FieldState.prototype, "queueValidation", void 0);
__decorate([
    mobx_1.action
], FieldState.prototype, "onUpdate", void 0);
exports.FieldState = FieldState;
/**
 * Just a wrapper around the helpers for a set of FieldStates or FormStates
 */
var FormState = (function () {
    function FormState(
        /**
         * SubItems can be any Validatable
         */
        $) {
        var _this = this;
        this.$ = $;
        this.mode = 'map';
        /** Get validatable objects from $ */
        this.getValues = function () {
            if (_this.mode === 'array')
                return _this.$;
            var keys = Object.keys(_this.$);
            return keys.map(function (key) { return _this.$[key]; });
        };
        this.validating = false;
        /**
         * Note:
         * - not use isArray as it might be an observable
         * - not using `undefined` as length might be a subfield
         **/
        this.mode = typeof $.length === 'number' ? 'array' : 'map';
    }
    /**
     * - Re-runs validation on all fields
     * - returns `hasError`
     * - if no error also return the validated values against each key.
     */
    FormState.prototype.validate = function () {
        var _this = this;
        this.validating = true;
        var values = this.getValues();
        return Promise.all(values.map(function (value) { return value.validate(); })).then(function (res) {
            _this.validating = false;
            var hasError = _this.hasError;
            if (hasError) {
                return { hasError: hasError };
            }
            else {
                return { hasError: hasError, value: _this.$ };
            }
        });
    };
    Object.defineProperty(FormState.prototype, "hasError", {
        /**
         * Does any field have an error
         */
        get: function () {
            return this.getValues().some(function (f) { return f.hasError; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormState.prototype, "error", {
        /**
         * The first error from any sub if any
         */
        get: function () {
            var subItemWithError = this.getValues().find(function (f) { return !!f.hasError; });
            return subItemWithError.error;
        },
        enumerable: true,
        configurable: true
    });
    return FormState;
}());
__decorate([
    mobx_1.observable
], FormState.prototype, "validating", void 0);
__decorate([
    mobx_1.action
], FormState.prototype, "validate", null);
__decorate([
    mobx_1.computed
], FormState.prototype, "hasError", null);
__decorate([
    mobx_1.computed
], FormState.prototype, "error", null);
exports.FormState = FormState;
